// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your preferred database
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  password     String   // Store hashed password
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profileImage String?  // Optional profile picture URL

  // Relations
  goals        Goal[]       @relation("UserGoals")      // User's goals
  topics       Topic[]      @relation("UserTopics")     // Topics user has created
  todoLists    TodoList[]   @relation("UserTodoLists")  // To-do lists created by user
  questions    Question[]    @relation("UserQuestions")  // Questions added by user
}

model Goal {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  user        User?    @relation("UserGoals", fields: [userId], references: [id])
  topics      Topic[]  // A goal has multiple topics
}

model Topic {
  id          String   @id @default(uuid())
  title       String
  description String?
  goalId      String
  userId      String?
  goal        Goal     @relation(fields: [goalId], references: [id])
  user        User?    @relation("UserTopics", fields: [userId], references: [id])
  todoLists   TodoList[]
  subTopics   SubTopic[]
  questions   Question[]

  // Relation back to Outline
  outlines    Outline[] // Added this field to define the relation
}

model TodoList {
  id          String   @id @default(uuid())
  title       String
  description String?
  topicId     String
  userId      String?
  topic       Topic    @relation(fields: [topicId], references: [id])
  user        User?    @relation("UserTodoLists", fields: [userId], references: [id])
  items       TodoItem[]
}

model TodoItem {
  id           String   @id @default(uuid())
  title        String
  isCompleted  Boolean  @default(false)
  todoListId   String
  todoList     TodoList @relation(fields: [todoListId], references: [id])

  // Relation back to Link
  links        Link[]   // Added this field to define the relation
}

model SubTopic {
  id          String      @id @default(uuid())
  title       String
  content     String?     // Optional content for the main description
  topicId     String
  topic       Topic       @relation(fields: [topicId], references: [id])
  subHeadings SubHeading[] // List of subheadings within the subtopic

  // Relation back to Link
  links        Link[]      // Added this field to define the relation
}

model SubHeading {
  id          String   @id @default(uuid())
  title       String
  content     String?  // Content under each subheading
  subTopicId  String
  subTopic    SubTopic @relation(fields: [subTopicId], references: [id])
}

model Link {
  id          String @id @default(uuid())
  url         String
  title       String?
  todoItemId  String?
  todoItem    TodoItem? @relation(fields: [todoItemId], references: [id])
  subTopicId  String?
  subTopic    SubTopic? @relation(fields: [subTopicId], references: [id])
}

model Outline {
  id           String  @id @default(uuid())
  shape        Shape   // Circle or square
  content      String? // Text content
  color        String?
  fontSize     Int?
  topicId      String
  topic        Topic   @relation(fields: [topicId], references: [id])
}

model Question {
  id          String @id @default(uuid())
  title       String
  content     String?
  isAnswered  Boolean @default(false)
  topicId     String
  userId      String?
  topic       Topic @relation(fields: [topicId], references: [id])
  user        User?   @relation("UserQuestions", fields: [userId], references: [id])
}

enum Shape {
  CIRCLE
  SQUARE
}
